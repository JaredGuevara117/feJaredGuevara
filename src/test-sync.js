// Script de prueba para la sincronizaci√≥n
import apiService from './apiService.js';
import dbManager from './database.js';

// Funci√≥n para probar la sincronizaci√≥n
async function testSync() {
  console.log('üß™ Iniciando test de sincronizaci√≥n...');
  
  try {
    // 1. Verificar estado inicial
    console.log('\n1. üìä Estado inicial:');
    const initialStats = await apiService.getStats();
    console.log('Estad√≠sticas:', initialStats);
    
    // 2. Simular datos offline
    console.log('\n2. üì± Simulando datos offline...');
    const testData = {
      url: 'http://localhost:3000/api/tasks',
      method: 'POST',
      endpoint: '/tasks',
      data: {
        title: 'Test Task Offline',
        body: 'Esta tarea fue creada offline',
        userId: 1
      },
      id: Date.now().toString()
    };
    
    await dbManager.savePendingData(testData);
    console.log('‚úÖ Dato guardado en IndexedDB');
    
    // 3. Verificar datos en IndexedDB
    console.log('\n3. üóÑÔ∏è Datos en IndexedDB:');
    const pendingData = await dbManager.getAllPendingData();
    console.log('Datos pendientes:', pendingData.length);
    
    // 4. Probar sincronizaci√≥n
    console.log('\n4. üîÑ Probando sincronizaci√≥n...');
    await apiService.forceSync();
    
    // 5. Verificar resultado
    console.log('\n5. ‚úÖ Verificando resultado:');
    const finalStats = await apiService.getStats();
    console.log('Estad√≠sticas finales:', finalStats);
    
    const remainingData = await dbManager.getAllPendingData();
    console.log('Datos restantes en IndexedDB:', remainingData.length);
    
    if (remainingData.length === 0) {
      console.log('üéâ ¬°Sincronizaci√≥n exitosa! Los datos se eliminaron de IndexedDB');
    } else {
      console.log('‚ö†Ô∏è A√∫n hay datos pendientes en IndexedDB');
    }
    
  } catch (error) {
    console.error('‚ùå Error en test:', error);
  }
}

// Funci√≥n para simular p√©rdida de conexi√≥n
async function simulateOffline() {
  console.log('üì¥ Simulando modo offline...');
  
  // Simular que no hay conexi√≥n
  Object.defineProperty(navigator, 'onLine', {
    writable: true,
    value: false
  });
  
  // Disparar evento offline
  window.dispatchEvent(new Event('offline'));
  
  console.log('‚úÖ Modo offline simulado');
}

// Funci√≥n para simular restauraci√≥n de conexi√≥n
async function simulateOnline() {
  console.log('üåê Simulando restauraci√≥n de conexi√≥n...');
  
  // Simular que hay conexi√≥n
  Object.defineProperty(navigator, 'onLine', {
    writable: true,
    value: true
  });
  
  // Disparar evento online
  window.dispatchEvent(new Event('online'));
  
  console.log('‚úÖ Conexi√≥n restaurada simulada');
}

// Exportar funciones para uso en consola
window.testSync = testSync;
window.simulateOffline = simulateOffline;
window.simulateOnline = simulateOnline;

console.log('üîß Funciones de test disponibles:');
console.log('- testSync(): Probar sincronizaci√≥n completa');
console.log('- simulateOffline(): Simular p√©rdida de conexi√≥n');
console.log('- simulateOnline(): Simular restauraci√≥n de conexi√≥n');
console.log('\nüí° Ejemplo de uso:');
console.log('1. simulateOffline()');
console.log('2. // Crear algunas tareas en la app');
console.log('3. simulateOnline()');
console.log('4. testSync()');
